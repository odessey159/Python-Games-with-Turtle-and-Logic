import turtle,random
tnum=turtle.Turtle()
t=turtle.Turtle()
leadert=turtle.Turtle()
turtle.tracer(False)
t.hideturtle(),leadert.hideturtle(),tnum.hideturtle()
size = int(turtle.numinput("Shen Yihao's Puzzle Size", "Enter puzzle size (3, 4, or 5): ", minval=3, maxval=5))#promt the user to put in the number of lines
slidesize=80
clickx,clicky=0,0
turtle.setup((size+0)*slidesize+25,(size+0)*slidesize+25)#change the size of screen
turtle.screensize((size+0)*slidesize,(size+0)*slidesize)
originx,originy=-size*slidesize/2,size*slidesize/2 #set the origin at(-size*slidesize/2,size*slidesize/2)
puzzle = [[0 for i in range(size)] for j in range(size)]
t.fillcolor('yellow')#turn the color of tile to yellow
leadert.fillcolor('yellow')
def animating():#animate the progress of moving tiles
    leadert.up()
    leadert.goto(originx+slidesize*spacey,originy-slidesize*spacex)
    for i in range(500):
        leadert.clear()
        leadert.goto(originx+slidesize*spacey+i*(slidesize/500)*(clicky-spacey),originy-slidesize*spacex-(clickx-spacex)*(slidesize/500)*i)
        leadert.begin_fill()
        leadert.seth(0)
        for i in range(4):
            leadert.forward(slidesize-5)
            leadert.right(90)
        leadert.end_fill()
        turtle.Screen().update()
    leadert.clear()
def drawsquare(y,x):#draw the tiles
    t.up()
    t.goto(originx+slidesize*x,originy-slidesize*y)
    t.begin_fill()
    t.seth(0)
    for i in range(4):
        t.forward(slidesize-5)
        t.right(90)
    t.end_fill()
def drawnumber(y,x):#draw the number on the tiles
    tnum.up()
    tnum.color('purple')
    tnum.goto(originx+slidesize*(x+0.5),originy-slidesize*(y+0.5)-15)
    tnum.write(puzzle[y][x], align="center",font=('Arial',20))
def outputpuzzle(ju):
    t.clear()
    tnum.clear()
    for i in range(size):#draw the tiles
        for j in range(size):
            if (puzzle[i][j]!=size*size):
                if (ju==1) and (i==int(clickx) and j==int(clicky)):continue
                else:drawsquare(i,j)
    if(ju==1):
        animating()
        drawsquare(clicky,clickx)
    for i in range(size):#draw the number on the tiles
        for j in range(size):
            if (puzzle[i][j]!=size*size):drawnumber(i,j)
def puzzlegenerating():
    global spacex, spacey
    spacex ,spacey = size-1,size-1# Generate a puzzle in order
    for i in range(0, size):
        for j in range(0, size):
            puzzle[i][j] = i * size + j + 1
    for i in range(0, 10000):# Perform a series of random valid moves to shuffle the puzzle. Tthe puzzle generated by this way must be solvable
        randommovement = random.randint(1, 4)
        if randommovement == 1 and spacex != 0:
            puzzle[spacex][spacey], puzzle[spacex - 1][spacey] = puzzle[spacex - 1][spacey], puzzle[spacex][spacey]
            spacex -= 1
        if randommovement == 2 and spacex != size-1:
            puzzle[spacex][spacey], puzzle[spacex + 1][spacey] = puzzle[spacex + 1][spacey], puzzle[spacex][spacey]
            spacex += 1
        if randommovement == 3 and spacey != 0:
            puzzle[spacex][spacey], puzzle[spacex][spacey - 1] = puzzle[spacex][spacey - 1], puzzle[spacex][spacey]
            spacey -= 1
        if randommovement == 4 and spacey != size-1:
            puzzle[spacex][spacey], puzzle[spacex][spacey + 1] = puzzle[spacex][spacey + 1], puzzle[spacex][spacey]
            spacey += 1
def getclick(fx,fy):
    global spacex,spacey,clickx,clicky
    clicky=int((fx-originx)//slidesize)#turn the coordinates of clicks into the x,y of the tiles
    clickx=-int((fy-originy)//slidesize)-1
    if (clickx==spacex-1 and clicky==spacey)or(clickx==spacex+1 and clicky==spacey)or(clickx==spacex and clicky==spacey-1)or(clickx==spacex and clicky==spacey+1):
        puzzle[spacex][spacey], puzzle[clickx][clicky] = puzzle[clickx][clicky], puzzle[spacex][spacey]#judge if the tile can be moved
        spacex,clickx=clickx,spacex
        spacey,clicky=clicky,spacey
        outputpuzzle(1)
    outputpuzzle(0)
    if ifwin()==1:
        t.fillcolor('red')#when win,turn the tile to red
        outputpuzzle(0)
        turtle.exitonclick()
def ifwin():#judge if win
    for i in range(0, size):
        for j in range(0, size):
            if puzzle[i][j] != int(i * size + j + 1):return 0
    return 1
def main():
    puzzlegenerating()#generate the puzzle
    outputpuzzle(0)#show the puzzle
    turtle.listen()
    turtle.onscreenclick(getclick)
    turtle.done()
main()